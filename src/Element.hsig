{-# language DataKinds #-}
{-# language KindSignatures #-}
{-# language MagicHash #-}
{-# language UnboxedTuples #-}

signature Element where

import GHC.Exts (State#,Int#)
import GHC.Exts (TYPE,RuntimeRep)
import Array (A#,M#)

data T
data R :: RuntimeRep
data T# :: TYPE R

lift :: T# -> T
unlift :: T -> T#

index# :: A# -> Int# -> T#
read# :: M# s -> Int# -> State# s -> (# State# s, T# #)
write# :: M# s -> Int# -> T# -> State# s -> State# s
set# :: M# s -> Int# -> Int# -> T# -> State# s -> State# s

uninitialized# :: Int# -> State# s -> (# State# s, M# s #)
initialized# :: Int# -> T# -> State# s -> (# State# s, M# s #)
copy# :: M# s -> Int# -> A# -> Int# -> Int# -> State# s -> State# s
copyMutable# :: M# s -> Int# -> M# s -> Int# -> Int# -> State# s -> State# s

shrink# :: M# s -> Int# -> State# s -> (# State# s, M# s #)

-- These are here for weird reasons. It may be removed from
-- the signature later.
eq# :: T# -> T# -> Int#
neq# :: T# -> T# -> Int#

-- Having a Show instance is really useful for debugging stuff.
shows :: T -> String -> String
